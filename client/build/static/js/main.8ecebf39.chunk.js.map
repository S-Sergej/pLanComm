{"version":3,"sources":["services/auth.js","components/Navbar.js","components/Startpage.js","components/Signup.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["signup","username","password","email","axios","post","then","response","data","catch","err","login","Navbar","props","className","bg","user","to","onClick","delete","setUser","Startpage","React","Component","Signup","state","error","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","message","console","log","this","Form","onSubmit","Group","Label","htmlFor","Control","type","id","onChange","Alert","variant","Button","require","config","Login","style","width","window","location","href","App","exact","path","component","render","Boolean","hostname","match","get","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ecebf39.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst signup = (username, password, email) => {\n  return axios\n    .post(\"/api/auth/signup\", {\n      username: username,\n      password: password,\n      email: email,\n    })\n    .then(response => {\n      return response.data;\n    })\n    .catch(err => {\n      return err.response.data;\n    });\n};\n\nconst login = (username, password, email) => {\n  return axios\n    .post(\"/api/auth/login\", {\n      username: username,\n      password: password,\n      email: email\n    })\n    .then(response => {\n      return response.data;\n    })\n    .catch(err => {\n      return err.response.data;\n    });\n};\n\n\nconst logout = () => {\n  axios.delete(\"/api/auth/logout\");\n};\n\nexport { signup, login, logout };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar as Nav } from \"react-bootstrap\";\nimport { logout } from \"../services/auth\";\n\nconst Navbar = props => {\n  const handleLogout = () => {\n    // destroys the session on the server\n    logout();\n    // updates the `user` state in App\n    props.setUser(null);\n  };\n\n  return (\n    <Nav className=\"nav justify-content-end\" bg=\"primary\">\n      {props.user ? (\n        <div>\n          <Link to=\"/\">Welcome {props.user.username}</Link>\n          <Link to=\"/\" onClick={handleLogout}>\n            Logout\n          </Link>\n        </div>\n      ) : (\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/signup\">Signup</Link>\n          <Link to=\"/login\">Login</Link>\n        </div>\n      )}\n    </Nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nclass Startpage extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>pLanComm</h1>\n                <p> wellcome to the private lan community !</p>\n            </div>\n        )\n    }\n\n}\n\nexport default Startpage;","import React, { Component } from \"react\";\nimport { signup } from \"../services/auth\";\nimport { Alert, Form, Button } from \"react-bootstrap\";\n\nclass Signup extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    error: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    signup(this.state.username, this.state.password, this.state.email).then(data => {\n      if (data.message) {\n        // handle errors\n        this.setState({\n          error: data.message\n        });\n      } else {\n        // no error\n        // lift the data up to the App state\n        this.props.setUser(data);\n        // redirect to \"/projects\"\n        //this.props.history.push(\"/projects\");\n      }\n    });\n  };\n\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        <h2>Signup</h2>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group>\n            <Form.Label htmlFor=\"username\">Username: </Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"username\"\n              id=\"username\"\n              value={this.state.username}\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          \n          <Form.Group>\n            <Form.Label htmlFor=\"password\">Password: </Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label htmlFor=\"email\">Email: </Form.Label>\n            <Form.Control\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n\n          {this.state.error && (\n            <Alert variant=\"danger\">{this.state.error}</Alert>\n          )}\n          <Button type=\"submit\">Sign up</Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","import {GoogleLoginButton, GithubLoginButton} from 'react-social-login-buttons';\nimport GoogleButton from 'react-google-button';\nimport React, { Component } from \"react\";\nimport { login } from \"../services/auth\";\nimport { Alert, Form, Button } from \"react-bootstrap\";\nimport {Link } from \"react-router-dom\";\nrequire('dotenv').config();\n\nclass Login extends Component {\n  \n  state = {\n    username: \"\",\n    password: \"\",\n    error: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    login(this.state.username, this.state.password).then(data => {\n      if (data.message) {\n        // handle errors\n        this.setState({\n          error: data.message\n        });\n      } else {\n        // no error\n        // lift the data up to the App state\n        this.props.setUser(data);\n        // redirect to \"/projects\"\n        //this.props.history.push(\"/projects\");\n      }\n    });\n  };\n  \n  render() {\n    const REACT_APP_CALLBACK_URL_LOCAL='http://localhost:5555/api/auth/google'\n    const REACT_APP_CALLBACK_URL='http://plancomm.herokuapp.com/api/auth/google'\n    const GITHUB_LOCAL_REDIRECT='http://localhost:5555/api/auth/github'\n    const GITHUB_REDIRECT='http://plancomm.herokuapp.com/api/auth/github'\n    return (\n      <div>\n        <h2>Login</h2>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group>\n            <Form.Label htmlFor=\"username\">Username: </Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"username\"\n              id=\"username\"\n              value={this.state.username}\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"password\">Password: </Form.Label>\n            <Form.Control\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              value={this.state.password}\n              onChange={this.handleChange}\n            />\n\n          </Form.Group>\n          {this.state.error && (\n            <Alert variant=\"danger\">{this.state.error}</Alert>\n          )}\n          <Button type=\"submit\">Log in</Button>\n        </Form>\n        {/*links for heroky usage configured*/}\n        <div className=\"SocialButtons\">\n        <GoogleLoginButton style={{width: \"300px\"}} onClick={() => window.location.href=REACT_APP_CALLBACK_URL}/>\n        <GithubLoginButton style={{width: \"300px\"}} onClick={() => window.location.href=GITHUB_REDIRECT} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport {Switch, Route, Redirect } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Startpage from \"./components/Startpage\";\nimport Signup from \"./components/Signup\";\nimport Login from \"./components/Login\";\n\nclass App extends React.Component {\n  state = {\n    user: this.props.user\n  };\n\n  setUser = user => {\n    this.setState({\n      user: user\n    });\n  };\n\n  /*projectsRoute = props => {\n    if (this.state.user) {\n      return <Projects {...props} />;\n    } else {\n      return <Redirect to=\"/\" />;\n    }\n  } */\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar user={this.state.user} setUser={this.setUser} />\n        <Switch>\n          <Route exact path=\"/\" component={Startpage} />\n          <Route exact path=\"/signup\" render={\n            props => <Signup {...props} setUser={this.setUser} />\n          }/>\n          <Route exact path=\"/login\" render={\n            props => <Login {...props} setUser={this.setUser} />\n          }/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\"; // npm install boostrap\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport axios from \"axios\";\n\naxios.get(\"/api/auth/loggedin\").then(response => {\n  const user = response.data;\n\n  ReactDOM.render(\n    <BrowserRouter>\n      <App user={user} />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}